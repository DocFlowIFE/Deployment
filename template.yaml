AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Deploys DocFlow application for managing tickets with messages

Parameters:
  UsersPoolName:
    Type: String
    Default: docflow-users
    Description: |
      User group name for users.
  AdminPoolName:
    Type: String
    Default: docflow-admins
    Description: |
      Admin group name for users.
  TemplateBucket:
    Type: String
    Description: |
      Template bucket name.
  TemplateBucketPrefix:
    Type: String
    Description: |
      Prefix for template bucket files.
  DBName:
    Description: Database Name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Default: docflow
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 64 characters

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 5432
    ConstraintDescription: 'Must be in the range [1115-65535]'
    MinValue: 1115
    MaxValue: 65535

  DBUsername:
    Description: Database master username
    Default: docflow
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 16 characters

  DBEngineVersion:
    Description: Database engine version
    Type: String
    Default: 5.7.mysql_aurora.2.08.0

  DBInstanceSize:
    Default: db.t3.small
    Description: Database instance size.
    Type: String
    AllowedValues:
      - db.t3.small
      - db.t3.medium
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.r5.12xlarge
      - db.r5.16xlarge
      - db.r5.24xlarge

Globals:
  Function:
    Runtime: python3.8
    Timeout: 30
    Handler: index.handler

Resources:
  # S3 documents bucket
  DocumentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      Description: >-
        Bucket for storing document files
    Properties:
      AccessControl:
        Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # RDS
  RDSCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Engine: aurora-mysql
      EngineVersion: !Ref DBEngineVersion
      DatabaseName: !Ref DBName
      Port: !Ref DBPort
      MasterUsername: !Sub "{{resolve:secretsmanager:${Secret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${Secret}:SecretString:password}}"

  Secret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: Secret for the Aurora database
      GenerateSecretString:
        SecretStringTemplate: !Join [ '', [ '{"username": "', !Ref DBUsername, '"}' ] ]
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\'
        PasswordLength: 32
  SecretClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      SecretId: !Ref Secret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster

  DatabaseInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: aurora-mysql
      EngineVersion: !Ref DBEngineVersion
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DBInstanceSize
      PubliclyAccessible: false

  # Cognito
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UsersPoolName
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${UsersPoolName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  AdminPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref AdminPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  AdminPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AdminPoolName}-client
      GenerateSecret: false
      UserPoolId: !Ref AdminPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  # Admin API
  AdminAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        InvokeRole: CALLER_CREDENTIALS
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: false
        DefaultAuthorizer: Docflow-AdminAccess
        Authorizers:
          Docflow-AdminAccess:
            UserPoolArn: !GetAtt AdminPool.Arn

  CreateTicketTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CreateTicketTemplate
      Description: Allows for creating new ticket templates
      Events:
        CreateDocument:
          Type: Api
          Properties:
            RestApiId: !Ref AdminAPI
            Path: /ticketTemplates
            Method: post
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  GetTicketTemplatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetTicketTemplates
      Description: Returns all ticket templates
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref AdminAPI
            Path: /ticketTemplates
            Method: get
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  GetTicketTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetTicketTemplate
      Description: Returns a specified ticket templates
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref AdminAPI
            Path: /ticketTemplates/{templateId}
            Method: get
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  DeleteTicketTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/DeleteTicketTemplate
      Description: Deletes a specified ticket templates
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref AdminAPI
            Path: /ticketTemplates/{templateId}
            Method: delete
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  # public API
  PublicAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        InvokeRole: CALLER_CREDENTIALS
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: false
        DefaultAuthorizer: Docflow-UserAccess
        Authorizers:
          Docflow-UserAccess:
            UserPoolArn: !GetAtt UserPool.Arn
          Docflow-AdminAccess:
            UserPoolArn: !GetAtt AdminPool.Arn

  CreateDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CreateDocument
      Description: Creates a new document
      Events:
        CreateDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /documents
            Method: post
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"

  GetDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetDocument
      Description: Returns a document
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /documents/{documentId}
            Method: get
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"

  DeleteDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/DeleteDocument
      Description: Deletes a document
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /documents/{documentId}
            Method: delete
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:DeleteObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"

  CreateTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CreateTicket
      Description: Creates a new ticket
      Events:
        CreateDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /tickets
            Method: post
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  GetTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetTicket
      Description: Returns particular ticket
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /tickets/{ticketId}
            Method: get
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret

  GetTicketsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetTicket
      Description: Returns all the tickets of the user
      Events:
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref PublicAPI
            Path: /tickets
            Method: get
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:ListBucket"
              Resource: !GetAtt DocumentBucket.Arn
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${DocumentBucket.Arn}/*"
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secret
      Environment:
        Variables:
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
          RDS_PORT: !GetAtt RDSCluster.Endpoint.Port
          RDS_Database: !Ref DBName
          RDS_SECRET_ARN: !Ref Secret



Outputs:
  PublicAPIEndpoint:
    Description: "API Gateway endpoint for the API public functions"
    Value: !Sub "https://${PublicAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolId:
    Description: "User Pool ID"
    Value: !Ref UserPool
  UserClientId:
    Description: "User Pool Client ID"
    Value: !Ref UserPoolClient
  AdminAPIEndpoint:
    Description: "API Gateway endpoint for the API admin functions"
    Value: !Sub "https://${AdminAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  AdminPoolId:
    Description: "Admin Pool ID"
    Value: !Ref AdminPool
  AdminClientId:
    Description: "Admin Pool Client ID"
    Value: !Ref AdminPoolClient
